---
name: Build
on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
    tags:
      - 'v*'

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          fetch-depth: 0
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3
      
      - name: Log in to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Install GoReleaser
        uses: goreleaser/goreleaser-action@9c156ee8a17a598857849441385a2041ef570552 # v6
        with:
          distribution: goreleaser
          version: '~> v2'
          install-only: true

      - name: Install uv
        uses: astral-sh/setup-uv@e92bafb6253dcd438e0484186d7669ea7a8ca1cc # v6
        with:
          version: "0.8.0" # https://github.com/go-task/task
      
      - name: Run GoReleaser (Build Only)
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: goreleaser build --snapshot --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  prep-release:
    if: ${{ github.ref == 'refs/heads/main' && github.actor != 'octo-sts[bot]' }}
    needs:
      - build
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: write
    steps:
      - uses: octo-sts/action@210248e8ae1ae1550aa6e232c6f192b3ccbf7335
        id: octo-sts
        with:
          scope: "Liatrio-Labs/otel-instrumentation-mcp"
          identity: semantic-release

      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          token: ${{ steps.octo-sts.outputs.token }}
          fetch-depth: 0

      - name: Get next version
        id: get_next_version
        uses: thenativeweb/get-next-version@067dc4602577f4f61a51c3f4664552283a228c60
        with:
          prefix: v # optional, defaults to ''

      - name: Show the next version and remove v
        id: show_next_version_removed
        run: |
          echo ${{ steps.get_next_version.outputs.version }}
          echo ${{ steps.get_next_version.outputs.hasNextVersion }}
          echo "version=$(echo ${{ steps.get_next_version.outputs.version }} | sed 's/v//')" >> "$GITHUB_OUTPUT"

      - name: Get GitHub App User ID
        id: get-user-id
        run: echo "user-id=$(gh api "/users/octo-sts[bot]" --jq .id)" >> "$GITHUB_OUTPUT"
        env:
          GH_TOKEN: ${{ steps.octo-sts.outputs.token }}

      - name: Update files with next version
        if: ${{ steps.get_next_version.outputs.hasNextVersion == 'true' }}
        run: |
          set -eox pipefail
          git config --global user.name 'octo-sts[bot]'
          git config --global user.email '${{ steps.get-user-id.outputs.user-id }}+octo-sts[bot]@users.noreply.github.com'

          CURRENT=$(yq eval '.spec.template.spec.containers[0].image' ./manifests/base/deploy.yaml)
          FUTURE="ghcr.io/liatrio-labs/otel-instrumentation-mcp:${{ steps.show_next_version_removed.outputs.version }}"

          if [ "$CURRENT" != "$FUTURE" ]; then
            yq -i '.spec.template.spec.containers[0].image = "ghcr.io/liatrio-labs/otel-instrumentation-mcp:${{ steps.show_next_version_removed.outputs.version }}"' ./manifests/base/deploy.yaml
            git add manifests/base/deploy.yaml
          fi

          # Do this twice just because they could both be wrong
          CURRENT=$(yq -oy 'pyproject.toml' | yq eval '.project.version')
          if [ "$CURRENT" != "${{ steps.show_next_version_removed.outputs.version }}" ]; then
            sed -i "s|^version = \".*\"|version = \"${{ steps.show_next_version_removed.outputs.version }}\"|" pyproject.toml
            sed -i "s|^version = \".*\"|version = \"${{ steps.show_next_version_removed.outputs.version }}\"|" uv.lock
            git add pyproject.toml
          fi

            git commit -m "chore: prepare release for next app versions ${{ steps.get_next_version.outputs.version }}"
            git push     
